<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-41323237">https://github.com/mdecp2024/hw-41323237</a> </p>
<p>個人網站: <span> </span><a class="Link--inTextBlock" href="https://mdecp2024.github.io/hw-41323237/">https://mdecp2024.github.io/hw-41323237</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p>w11</p><p>w11</p><p>w11</p>
<p>w11</p>
<p>w11_hw</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/OALd-RP43gI?si=1Hils6xNlrqfYmk4" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 圓心位置
center_x, center_y = 5, 5
# 圓的半徑
radius = 4
# 10x10 的區域大小
size = 10

# 遍歷區域中的每個位置
for y in range(size):
    for x in range(size):
        # 計算當前位置與圓心的距離平方
        distance_squared = (x - center_x) ** 2 + (y - center_y) ** 2
        # 若距離平方小於等於半徑的平方，則列印 *
        if distance_squared &lt;= radius ** 2:
            print("*", end="")
        else:
            print(" ", end="")
    # 換行
    print()</pre>
<p>設定圖框顏色</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

#每一個的pixcel數
gs = 20

#gs"tc = canvas width and height

ctx = canvas.getContext("2d")
width = 11
height = 11


for i in range(width):
     for j in range(height):
         #dRect(i*gs,j*gs,gs,gs,1,"lightgray")
          ctx.lineWidth = 1
          ctx.strokeStyle = ('lightgray')
          ctx.beginPath();
          ctx.rect(i*gs,j*gs,gs,gs)
          ctx.stroke();
    

</pre>
<p></p><h2>HW 1 Exam</h2>
<h3>w15</h3>
<p>題目一:</p>
<p><a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/f173084393905a478c883ec97037469f/raw/ab4c2e6a578cba78d5e4679bc64def34b118e1de/w15.py">從 1 累加到 100</a></p>
<p>題目二:</p>
<p><a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/f173084393905a478c883ec97037469f/raw/ab4c2e6a578cba78d5e4679bc64def34b118e1de/w15.py">addto()函數</a></p>
<p>題目三:</p>
<p><a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/4d1ff8fd3fa69283032a27f8b4294dbb/raw/678bf40689ade31df5ebb95dcef47ea894fd0033/w15.py">add_only_even</a></p>
<p>題目四:</p><h3>w14_ex</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 創建畫布元素
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以適應圓形
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")

grid_size = 2
ctx.lineWidth = 1

# 定義三個圓的屬性（圓心座標和半徑）
circle1 = {'cx': 200, 'cy': 200, 'r': 141.4, 'color': 'lightgreen'}
circle2 = {'cx': 300, 'cy': 300, 'r': 141.4, 'color': 'lightcoral'}
circle3 = {'cx': 400, 'cy': 200, 'r': 141.4, 'color': 'lightblue'}

# 函數：檢查點是否在圓內
def point_in_circle(x, y, circle):
    return (x - circle['cx'])**2 + (y - circle['cy'])**2 &lt; circle['r']**2

# 函數：檢查點是否在兩個或更多圓的重疊區域
def get_overlap_color(x, y):
    overlap_count = 0
    if point_in_circle(x, y, circle1):
        overlap_count += 1
    if point_in_circle(x, y, circle2):
        overlap_count += 1
    if point_in_circle(x, y, circle3):
        overlap_count += 1
    
    # 如果點位於兩個或更多圓的區域，則返回重疊區域的顏色
    if overlap_count &gt; 1:
        return 'purple'
    # 否則，返回圓的原始顏色
    elif point_in_circle(x, y, circle1):
        return circle1['color']
    elif point_in_circle(x, y, circle2):
        return circle2['color']
    elif point_in_circle(x, y, circle3):
        return circle3['color']
    return None  # 如果不在任何圓內，則返回 None

# 繪製圓形及其顏色
def draw_circle(circle):
    ctx.fillStyle = circle['color']
    ctx.beginPath()
    ctx.arc(circle['cx'], circle['cy'], circle['r'], 0, 2 * math.pi)
    ctx.fill()

draw_circle(circle1)
draw_circle(circle2)
draw_circle(circle3)

# 可選步驟：用透明顏色填充畫布背景
ctx.clearRect(0, 0, 600, 600)  # 清除畫布上的內容，去除圓形外的任何初始內容

# 函數：掃描並繪製顏色區域
def scan_and_draw():
    for x in range(0, 600, grid_size):  # 遍歷整個畫布
        for y in range(0, 600, grid_size):  # 從上到下檢查
            color = get_overlap_color(x, y)  # 根據每個點的位置獲取顏色（包括重疊區域）
            if color:  # 只有當顏色不為 None 時才繪製
                ctx.fillStyle = color
                ctx.beginPath()
                ctx.arc(x, y, int(grid_size / 2), 0, 2 * math.pi)  # 繪製小圓點
                ctx.fill()  # 填充顏色

# 開始掃描並繪製顏色區域，包含重疊部分
scan_and_draw()
</pre>
<p></p><h3>w13_hw</h3>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">1.原圖</span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">從瀏覽器匯入html</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
從瀏覽器匯入文件為 doc</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
從瀏覽器導入視窗</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 利用 html 建立 canvas 元素</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
畫布= html.CANVAS（寬度= 400，高度= 400）</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
brython_div = doc["brython_div1"]</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
brython_div &lt;= 畫布</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 取得畫布的地形上下文</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx = canvas.getContext("2d")</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 第一個初始化的起始點</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
x1, y1 = 0, 0</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#第二個胡蘿蔔的左上角</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
x2, y2 = 100, 100</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
size = 200 # 托盤的大小</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 同等第一個托盤</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx.lineWidth = 2</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx.StrongStyle = '紅色'</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx.beginPath()</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx.rect(x1, y1, 大小, 大小)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx. 中風()</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 鄰近第二個托盤</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx.beginPath()</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx.rect(x2, y2, 大小, 大小)</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
ctx. 中風()</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 建立一個隱藏的快速顯著功能表</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
context_menu = html.DIV(id="context-menu", style={"display": "none", "position": "absolute", "background": "lightgray", "border": "1px Solid Black" ，「填充」：「5px」}）</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
context_menu &lt;= html.BUTTON("選項 1")</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
context_menu &lt;= html.BUTTON("選項 2")</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
context_menu &lt;= html.BUTTON("選項 3")</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
文檔 &lt;= 上下文選單</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 監聽右鍵點選事件顯示快顯功能表</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
def show_context_menu（事件）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    event.preventDefault() # 阻止預設右鍵選單顯示</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    context_menu.style.display = "區塊"</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    context_menu.style.left = f"{event.pageX}px"</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    context_menu.style.top = f"{event.pageY}px"</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 右鍵監聽點擊</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
canvas.bind("contextmenu", show_context_menu)</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#監聽文件的點擊事件，點擊其他地方時隱藏快顯功能表</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
def hide_context_menu（事件）：</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    context_menu.style.display = "無"</span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#監聽文檔點擊事件</span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
doc.bind("點", hide_context_menu)</span></span><span></span>
</pre>
<p><img alt="" height="417" src="/images/1210.png" width="427"/><br/><br/></p>
<p>2.塗色</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document as doc, window

# Create canvas element
canvas = html.CANVAS(width=500, height=500)  # Increase canvas size to ensure circles are fully visible
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# Get the drawing context of the canvas
ctx = canvas.getContext("2d")

# Draw the first empty square at (50, 50)
width = 10
height = 10
gs = 20  # Grid size (for spacing)

ctx.lineWidth = 2
ctx.strokeStyle = 'red'  # Color for the first square
ctx.beginPath()
ctx.rect(50, 50, width * gs, height * gs)  # Draw a hollow square with offset (50, 50)
ctx.stroke()

# Draw a blue diagonal line inside the first square
ctx.strokeStyle = 'blue'  # Set line color to blue
ctx.beginPath()
ctx.moveTo(50, 50)  # Starting point: top-left corner of the square
ctx.lineTo(50 + width * gs, 50 + height * gs)  # Ending point: bottom-right corner of the square
ctx.stroke()

# Draw the second empty square at (150, 150)
offset_x = 150  # Change the x-coordinate to give more space
offset_y = 150  # Change the y-coordinate to give more space
width2 = 10
height2 = 10

ctx.lineWidth = 2
ctx.strokeStyle = 'red'  # Color for the second square
ctx.beginPath()
ctx.rect(offset_x, offset_y, width2 * gs, height2 * gs)  # Draw another hollow square
ctx.stroke()

# Function to draw a circle around a square
def draw_outer_circle(x, y, width, height):
    # Calculate the radius of the outer circle (half of the diagonal of the square)
    radius = window.Math.sqrt(width ** 2 + height ** 2) / 2
    # Calculate the center of the square
    center_x = x + width * gs / 2
    center_y = y + height * gs / 2
    # Draw the outer circle
    ctx.beginPath()
    ctx.arc(center_x, center_y, radius * gs, 0, 2 * window.Math.PI)
    ctx.strokeStyle = 'black'  # Color for the outer circle
    ctx.lineWidth = 2
    ctx.stroke()

# Draw outer circles around both squares
draw_outer_circle(50, 50, width, height)  # For the first square
draw_outer_circle(offset_x, offset_y, width2, height2)  # For the second square

# Function to fill colors in each region based on the location
def fill_regions():
    # Iterate through the entire canvas and fill regions based on their coordinates
    for x in range(0, canvas.width, gs):
        for y in range(0, canvas.height, gs):
            # Check which region the (x, y) point falls into
            # For the first square (50, 50)
            if 50 &lt;= x &lt;= 50 + width * gs and 50 &lt;= y &lt;= 50 + height * gs:  # Inside the first square
                # Fill the region based on its position relative to the diagonal
                if y &lt; x:  # Above the diagonal line inside the first square
                    ctx.fillStyle = 'blue'  # Color the region above the diagonal
                    ctx.fillRect(x, y, gs, gs)
                elif y &gt;= x:  # Below the diagonal line inside the first square
                    ctx.fillStyle = 'red'  # Color the region below the diagonal
                    ctx.fillRect(x, y, gs, gs)
            # For the second square (150, 150)
            elif offset_x &lt;= x &lt;= offset_x + width2 * gs and offset_y &lt;= y &lt;= offset_y + height2 * gs:  # Inside the second square
                # Similar check for the second square
                if y &lt; x:  # Above the diagonal line inside the second square
                    ctx.fillStyle = 'blue'  # Color the region above the diagonal
                    ctx.fillRect(x, y, gs, gs)
                elif y &gt;= x:  # Below the diagonal line inside the second square
                    ctx.fillStyle = 'red'  # Color the region below the diagonal
                    ctx.fillRect(x, y, gs, gs)

# Call the function to fill the regions
fill_regions()
</pre>
<p><img alt="" height="520" src="/images/1212.png" width="531"/></p>
<p><br/><br/></p><h3>w11_hw</h3>
<p>題目一</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 圓心位置
center_x, center_y = 5, 5
# 圓的半徑
radius = 4
# 10x10 的區域大小
size = 10
 
# 遍歷區域中的每個位置
for y in range(size):
    for x in range(size):
        # 計算當前位置與圓心的距離平方
        distance_squared = (x - center_x) ** 2 + (y - center_y) ** 2
        # 若距離平方小於等於半徑的平方，則列印 *
        if distance_squared &lt;= radius ** 2:
            print("*", end="")
        else:
            print(" ", end="")
    # 換行
    print()</pre>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/OALd-RP43gI?si=sQtuPMpt5H7VndaC" title="YouTube video player" width="560"></iframe></p>
<p>題目二</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# canvas context
ctx = canvas.getContext("2d")

# 定義繪製矩形的函數
def dRect(lux, luy, w, h, s=1, c="lightgrey"):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

# 繪製網格
def grid(width, height, grid_pix):
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

# 填滿指定格子
def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect((x - 1) * gs, (y - 1) * gs, gs, gs)

# 判斷是否在圓形範圍內
def is_in_circle(cx, cy, x, y, r):
    # 使用格子的中心點來判斷是否在圓形範圍內
    return ((x - cx) ** 2 + (y - cy) ** 2) &lt;= r ** 2

# 圓形繪製
def draw_circle(grid_size, radius):
    center = (grid_size // 2)  # 圓心在網格的中間格子
    for i in range(1, grid_size + 1):
        for j in range(1, grid_size + 1):
            # 檢查格子的中心點是否在圓內
            # 每個格子的中心點是 (i-0.5, j-0.5)，這樣可以判斷格子的中心是否在圓形內
            if is_in_circle(center, center, i - 0.5, j - 0.5, radius):
                fill(i, j, "black")

# 主程式
grid(10, 10, gs)  # 繪製 10x10 的網格
draw_circle(10, 4.5)  # 圓的半徑為 4.5
</pre>
<p><br/><br/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/rO8R-e-fG9s?si=H79jhGlRerfD0Yui" title="YouTube video player" width="560"></iframe></p>
<p><span>已經有能力修改方案一將其改造成用黑色方塊圍成圓形區域，讓自己多學會一點方案設計，將來可以運用在更多地方。</span></p><h3>w12_hw</h3>
<p>1.<a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/6f0951e6a463a8351752bca9c7d1eb9b/raw/257cca984746a82c0e928d8a344fbbc83c783bc9/w12.py">貓咪</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print ("   /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("    / \    ")
print ("   (___)___")</pre>
<p>2.<a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/c31095b0f48307494d824b1f5298c267/raw/f2a45d99ee4c01284ae2120c6f3ccec376e47a86/w12.py">姓名</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "Huang" #變數first_name為"自己的姓"
last_name  = "Hance" #變數last_name為"自己的名"
print (first_name) #列印變數first_name
print (last_name) #列印變數last_name</pre>
<p>3.<a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/c71823ab3e580df1a7a115c8561c0ff4/raw/8c88c2f69c2c09fe8fc967a28bbeb4dc452afc3f/w12.py">最喜歡食物</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name?") #變數name為input所輸入之文字
favorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字
print ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)
print ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)
print (name + "'s favorite food is " + favorite_food) #列印name (數值)+ 's favorite food is (此段為文字)+favorite_food(數值)</pre>
<p>4.<a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/7b1ee270135862e5eb340b3736fa3ee7/raw/1ba49716655114df3fe51ab7cb90d3c9a513af69/w12.py">Book</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"] #在programming_books變數裡面有3個字串
print (programming_books) #列印programming_books變數(會出現三個字串)
wanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值
print (wanted_book) #列印wanted_book變數
if wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中
    print ("Yes, we sell it!")       #列印 是的我們有販賣
else:                            #反之    
    print ("Sorry, we don't sell that book") #列印 抱歉我們沒有販賣 </pre>
<p>5.<a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/8d9b6df91f6174fe4c0c1d6f8150e7f3/raw/9e06db95861b3c57d20f2d2e0f8bd3f4ecb412d8/w12.py">List</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串
print (shopping_list) #列印shopping_list變數
new_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值

if new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式
    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list
    print (shopping_list) #列印shopping_list字串
else:                    #反之
    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單
    print (shopping_list) #列印購物清單
#以下是移除物品的程式
item_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)

if item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行
    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)
    print (shopping_list) #列印購物清單
else:                     #反之
    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)
    print (shopping_list) #列印購物清單</pre>
<p>6.<a href="https://mdecp2024.github.io/hw-41323237/content/Brython.html?src=https://gist.githubusercontent.com/41323237/9c6bea1684c842c74aa013f9d674a474/raw/8efdde64ef51aee6cfaa99150388b6f1f3565381/w12.py">menu</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"
side_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個
print (side_dish_index) #列印side_dish_index  列印他在第幾位
todays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉
print (todays_menu) #列印今日菜單
todays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條
print (todays_menu) #列印今日菜單</pre>
<p>7.<a href="https://gist.githubusercontent.com/41323237/46de05e8678905f748e9b31b648c5a51/raw/8ff01e972f599fc0bbb63838796d3c4206bdf471/w12.py">City</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] #變數城市=以下字串
print (cities) #列印 (城市)
print (cities[1]) #列印 (城市 [1])    由於程式是由0開始計算 所以第一個會是Prague
print (cities[1:4]) #列印 (城市 [1:4]) 列印出來會是['Prague', 'Cape Town', 'Tokyo'] 由於執行到4就停止了所以只有三個
print (cities[1:4:2]) #列印 城市 [1:4:2]) 列印出來會是['Prague', 'Tokyo'] 因為步數設定為2 程式執行會把1~4由左至右一次跳過兩個進行輸出
print (cities[0:3]) #列印 城市 [0:3]) 列印出來會是['San Diego', 'Prague', 'Cape Town'] 這次是從0開始計算
print (cities[:3]) #列印 城市 [:3]) 列印出來會是['San Diego', 'Prague', 'Cape Town'] 由於未輸入數值,默認為0
print (cities[2:5]) #列印 城市 [2:5]) 列印出來會是 ['Cape Town', 'Tokyo', 'Melbourne'] 從2~5
print (cities[2:]) #列印 城市 [2:]) 列印出來會是 ['Cape Town', 'Tokyo', 'Melbourne'] 如果結束未輸入默認為列表的長度之值
print (cities[0:5:2]) #列印 城市 [0:5:2]) 列印出來會是['San Diego', 'Cape Town', 'Melbourne'] 程式執行會把0~5由左至右一次跳過兩個進行輸出
print (cities[::2]) #列印 城市 [::2]) 列印出來會是 ['San Diego', 'Cape Town', 'Melbourne'] 未輸入開始會默認0終點會默認列表的長度
print (cities[4]) #列印 城市 [4]) 列印出來會是 Melbourne 
print (cities[-1]) #列印 城市 [-1]) 列印出來會是 Melbourne -值會倒退計算 "含前不含後"
print (cities[-4:-1]) #列印 城市 [-4:-1]) 列印出來會是 ['Prague', 'Cape Town', 'Tokyo']
cities[3:0:-1] #這個是切片操作 如果列印出來會是 ['Tokyo', 'Cape Town', 'Prague']
cities[-2:-5:-1] #這個是切片操作 如果列印出來會是 ['Tokyo', 'Cape Town', 'Prague']
print (cities[::-1]) #列印 城市 [::-1]) ['Melbourne', 'Tokyo', 'Cape Town', 'Prague', 'San Diego']</pre>
<p></p><h3>w10</h3>
<p>題目一</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5irFLSzT0Ak?si=7uqp4ThfxVeb5X6G" title="YouTube video player" width="560"></iframe></p>
<p>題目二</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/2JTJiO9PigI?si=7w-eDVoG7RqgB6_G" title="YouTube video player" width="560"></iframe></p><h3>w7</h3>
<p><a href="https://www.youtube.com/watch?v=_7mWpiHSaSs">https://www.youtube.com/watch?v=_7mWpiHSaSs</a></p>
<p></p>
<p><a href="https://www.youtube.com/watch?v=Yzdoqg4Kef4">https://www.youtube.com/watch?v=Yzdoqg4Kef4</a></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w6</h3>
<p><img caption="false" height="398" src="/images/螢幕擷取畫面 2024-10-16 122957.png" width="557"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">時間 港口</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
導入鍵盤</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#利用zmqRemoteAPI以23000對場景伺服器進行連線</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
客戶端 = RemoteAPIClient('[::1]', 23000)</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 以 getObject 方法取得實例對象</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim = client.getObject('sim')</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
box = sim.getObject('/box')</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 啟動模擬</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.startSimulation()</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 設定立方體的尺寸和初始位置</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
立方體大小 = 0.2 # 20 厘米</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
密度 = 0.5 # 50 cm 之間的距離（可依需求調整）</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 收納立方體的行數和每行的數量</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
rows = 5 # 從第 1 行到第 5 行</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 在正的 Y 方向存放立方體</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
對於範圍內的行（行）：</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 計算每行的初始x位置，設定最便宜</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    start_row_x = - (cubes_in_row[行] - 1) * 間距 / 2</span></span></span></span></span></span><span></span>
    <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍內的列（cubes_in_row[row]）：</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算每個立方體的位置</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        x_position = start_row_x + col * 間距</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        y_position=row*spacing#垂直方向上每行間距</span></span></span></span></span></span><span></span>
        <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 建立立方體</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0)</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 在負的 Y 方向存放立方體</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
對於範圍內的行（行）：</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 計算每行的初始x位置，設定最便宜</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    start_row_x = - (cubes_in_row[行] - 1) * 間距 / 2</span></span></span></span></span></span><span></span>
    <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    對於範圍內的列（cubes_in_row[row]）：</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 計算每個立方體的位置</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        x_position = start_row_x + col * 間距</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        y_位置 = -行 * 密度 # 負的 Y 方向</span></span></span></span></span></span><span></span>
        <span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 建立立方體</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size,cube_size,cube_size], 0)</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position,cube_size / 2]) # z 方向上升到立方體的中心</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 完成正方體的收納盒</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
print("立方體已成功出貨！")</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
#設定主迴圈</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
而真實：</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    # 在這裡可以進行其他模擬操作</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    time.sleep(0.1) #確保迴圈不會太快</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
    如果鍵盤.is_pressed('q'):</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        # 可以按q鍵跳出重複執行迴圈</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
        休息時間</span></span></span></span></span></span><span></span>
<span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
# 終止模擬</span></span></span></span></span></span><span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">
sim.stopSimulation()</span></span></span></span></span></span><span></span>
</pre>
<p></p>
<p>我覺得學習python，一定幫助人們走向更高的巔峰，<span>python在工業未來是不可或缺的存在，一定要</span><span>讓自己更快學會這門技術</span></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><main>
<div class="container">
<div>
<p id="content"><br/>        </p>
</div>
</div>
</main></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<footer class="page-footer">
<div class="container">
<div class="row">
<div class="col l6 s6"></div>
</div>
</div>
</footer>
<h3>w8</h3>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h3>w5</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#單行註解
#help(print)
'''引號區域被視為多行註解
'''
a="一個字串"
a=24
a=24.5
print(a)
b=print(a,a,a,sep='*')
print(b)
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 設定金字塔的高度
height = 30

# 使用 for 迴圈列印金字塔
for i in range(height):
    # 列印空格
    print('　' * (height - i - 1 + 2), end='')  # 增加 2 個空格
    # 列印星號
    print('＊' * (2 * i + 1))
</pre>
<p><br/><br/><br/></p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w8</h3>
<h3>w8</h3>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>